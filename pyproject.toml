[build-system]
requires = ["hatchling", "hatch-requirements-txt"]
build-backend = "hatchling.build"

[project]
name = "appimage"
dynamic = ["version", "dependencies"]
authors = [
    {name = "SSH-MITM Dev-Team", email = "support@ssh-mitm.at"}
]
maintainers = [
  {name = "Manfred Kaiser", email = "manfred.kaiser@ssh-mitm.at"}
]
description = "AppImage start script to convert the python application in full python environment"
readme = "README.md"
license = {file = "LICENSE"}
keywords = [
    "appimage",
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Topic :: System :: Networking",
    "Development Status :: 5 - Production/Stable",
]
requires-python = ">= 3.8"

[project.urls]
Homepage = "https://www.ssh-mitm.at"
Documentation = "https://appimage.ssh-mitm.at"
Changelog = "https://github.com/ssh-mitm/appimage/blob/master/CHANGELOG.md"
Source = "https://github.com/ssh-mitm/appimage"
Tracker = "https://github.com/ssh-mitm/appimage/issues"

[tool.hatch.version]
path = "appimage/__init__.py"

[tool.hatch.metadata.hooks.requirements_txt]
files = ["requirements.in"]

[tool.hatch.build]
include = [
    "requirements.in",
    "appimage/**/*.py",
]

[tool.hatch.envs.lint]
detached = false
dependencies = [
    "bandit",
    "black",
    "flake8",
    "Flake8-pyproject",
    "mypy",
    "pylint",
]

[tool.hatch.envs.lint.scripts]
check = [
    "bandit -r appimage",
    "black --check appimage",
    "flake8 appimage",
    "pylint appimage",
    "mypy appimage",
]

[tool.flake8]
ignore = ["E203", "E501", "W503"]

[tool.mypy]
strict = true
install_types = true
non_interactive = true

[tool.pylint]
disable = [
    "duplicate-code",
    "line-too-long",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "fixme",
    "too-few-public-methods",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-statements",
    "too-many-locals",
    "too-many-return-statements"
]

[tool.pylint.MASTER]
load-plugins = "pylint.extensions.docparams"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D",       # Docstring related
    "E501",    # Line too long
    "PLR0912", # Too many branches
    "COM812",  # Trailing comma missing
    "FA100",   # Missing from __future__ import annotations
    "T201",    # `print` found
    "ANN101",  # Missing type annotation for `self` in method
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "PTH118",  # `os.path.join()` should be replaced by `Path` with `/` operator
    "PTH111",  # `os.path.expanduser()` should be replaced by `Path.expanduser()`
    "PTH113",  # `os.path.isfile()` should be replaced by `Path.is_file()`
    "PTH116",  # `os.stat()` should be replaced by `Path.stat()`, `Path.owner()`, or `Path.group()`
    "PTH103",  # `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    "PTH123",  # `open()` should be replaced by `Path.open()`
    "PTH107",  # `os.remove()` should be replaced by `Path.unlink()`
    "PTH119",  # `os.path.basename()` should be replaced by `Path.name`
    "PLR0913", # Too many arguments in function definition
    "S104",    # Possible binding to all interfaces
    "SLF001",  # Private member accessed: `_indent`
    "PLR0911", # Too many return statements
    "TRY400",  # Use `logging.exception` instead of `logging.error`
    "UP024",   # Replace aliased errors with `OSError`
]
